package com.wx.voice.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wx.voice.entity.DownFile;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWN_FILE".
*/
public class DownFileDao extends AbstractDao<DownFile, Long> {

    public static final String TABLENAME = "DOWN_FILE";

    /**
     * Properties of entity DownFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property File = new Property(2, String.class, "file", false, "FILE");
        public final static Property Size = new Property(3, long.class, "size", false, "SIZE");
        public final static Property Md5 = new Property(4, String.class, "md5", false, "MD5");
    }


    public DownFileDao(DaoConfig config) {
        super(config);
    }
    
    public DownFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWN_FILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"FILE\" TEXT," + // 2: file
                "\"SIZE\" INTEGER NOT NULL ," + // 3: size
                "\"MD5\" TEXT UNIQUE );"); // 4: md5
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWN_FILE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownFile entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(3, file);
        }
        stmt.bindLong(4, entity.getSize());
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(5, md5);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownFile entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(3, file);
        }
        stmt.bindLong(4, entity.getSize());
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(5, md5);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DownFile readEntity(Cursor cursor, int offset) {
        DownFile entity = new DownFile( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // file
            cursor.getLong(offset + 3), // size
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // md5
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownFile entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSize(cursor.getLong(offset + 3));
        entity.setMd5(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownFile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownFile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownFile entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
